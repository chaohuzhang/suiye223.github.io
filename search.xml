<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[compile boost in cywin]]></title>
    <url>%2F2019%2F05%2F12%2F1%2F</url>
    <content type="text"><![CDATA[1boost 在cywin上的编译跟在Linux平台上的编译步骤一样 2使用gcc工具链编译 3等待，编译完成]]></content>
      <categories>
        <category>编译</category>
      </categories>
      <tags>
        <tag>cgwin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[样式测试]]></title>
    <url>%2F2019%2F05%2F12%2F%E6%A0%B7%E5%BC%8F%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[enum AVMediaType codec_type：编解码器的类型（视频，音频…） struct AVCodec *codec：采用的解码器AVCodec（H.264,MPEG2…） int bit_rate：平均比特率 uint8_t *extradata; int extradata_size：针对特定编码器包含的附加信息（例如对于H.264解码器来说，存储SPS，PPS等） AVRational time_base：根据该参数，可以把PTS转化为实际的时间（单位为秒s） int width, height：如果是视频的话，代表宽和高 int refs：运动估计参考帧的个数（H.264的话会有多帧，MPEG2这类的一般就没有了） int sample_rate：采样率（音频） int channels：声道数（音频） enum AVSampleFormat sample_fmt：采样格式 int profile：型（H.264里面就有，其他编码标准应该也有） int level：级（和profile差不太多） int64_t pts：显示时间戳 int64_t dts：解码时间戳 //============================================================//开始手动录像 如果指定了录像文件大小,则录像时长无效，如filesize为0, 则duration有效//如果preRecording设置为1, 则相应的文件大小或文件时长均会增加预录的大小或时长, 例: 指定filesize为100MB,同时preRecording设置为1, 则实际录像文件大小为100MB+预录大小//预录大小和时长，库内部指定为10秒,但相应内存均由libEasyPlayerPro_OpenStream中的queueSize指定, 即:内存给的足够大，最大预录时长为10秒, 内存给的小,预录时长则不足10秒// 注: 当开启即时回放时，不允许手动录像, 即会返回-3123int libEasyPlayerPro_StartRecording(PLAYER_HANDLE handle, int channelId, const char *foldername, const char *filename, unsigned int filesize/*录像文件大小 MB*/, int duration/*录像时长(second)*/, unsigned char preRecording/*0x01:预录 0x00:不预录*/); github桌面共享, 支持RTSP转发, RTSP推流, RTMP推流windows发送端1234* 支持录屏开始，停止，达到1G后另存 3d* 支持设置声音 1d* 支持设置分辨率帧率 2d* 支持bjcast2 2d]]></content>
      <categories>
        <category>样式测试</category>
      </categories>
      <tags>
        <tag>2019</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F05%2F12%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[510]]></title>
    <url>%2F2019%2F05%2F10%2F510%2F</url>
    <content type="text"><![CDATA[你好网站样式测试二：使用说明1：前期准以及依赖maven依赖 koalas.rpc com.Koalas.rpc Koalas-1.0-SNAPSHOT 首先需要编写自己的thrift idl文件了，这里多说一句，在群里的小伙伴曾经说过idl文件编写不熟悉，有可能出错 这里顺带说一嘴，thrift的ldl文件和写java的请求体和service几乎没有任何区别，熟能生巧，上手之后非常简单 这里推荐几篇thrift的文章，有兴趣可以看一看 https://blog.csdn.net/lk10207160511/article/details/50450541， https://blog.csdn.net/hrn1216/article/details/51306395 下面截图为测试的thrift文件namespace java thrift.service include ‘WmCreateAccountRequest.thrift’include ‘WmCreateAccountRespone.thrift’ service WmCreateAccountService { WmCreateAccountRespone.WmCreateAccountRespone getRPC(1:WmCreateAccountRequest.WmCreateAccountRequest wmCreateAccountRequest); WmCreateAccountRespone.WmCreateAccountRespone koaloasTest1(1:WmCreateAccountRequest.WmCreateAccountRequest wmCreateAccountRequest); WmCreateAccountRespone.WmCreateAccountRespone koaloasTest2(1:WmCreateAccountRequest.WmCreateAccountRequest wmCreateAccountRequest); WmCreateAccountRespone.WmCreateAccountRespone koaloasTest3(1:WmCreateAccountRequest.WmCreateAccountRequest wmCreateAccountRequest); WmCreateAccountRespone.WmCreateAccountRespone koaloasTest4(1:WmCreateAccountRequest.WmCreateAccountRequest wmCreateAccountRequest); WmCreateAccountRespone.WmCreateAccountRespone koaloasTest5(1:WmCreateAccountRequest.WmCreateAccountRequest wmCreateAccountRequest); WmCreateAccountRespone.WmCreateAccountRespone koaloasTest6(1:WmCreateAccountRequest.WmCreateAccountRequest wmCreateAccountRequest); WmCreateAccountRespone.WmCreateAccountRespone koaloasTest7(1:WmCreateAccountRequest.WmCreateAccountRequest wmCreateAccountRequest); WmCreateAccountRespone.WmCreateAccountRespone koaloasTest8(1:WmCreateAccountRequest.WmCreateAccountRequest wmCreateAccountRequest); WmCreateAccountRespone.WmCreateAccountRespone koaloasTest9(1:WmCreateAccountRequest.WmCreateAccountRequest wmCreateAccountRequest); WmCreateAccountRespone.WmCreateAccountRespone koaloasTest10(1:WmCreateAccountRequest.WmCreateAccountRequest wmCreateAccountRequest); WmCreateAccountRespone.WmCreateAccountRespone koaloasTest11(1:WmCreateAccountRequest.WmCreateAccountRequest wmCreateAccountRequest); WmCreateAccountRespone.WmCreateAccountRespone koaloasTest12(1:WmCreateAccountRequest.WmCreateAccountRequest wmCreateAccountRequest);}namespace java thrift.domain/** 测试类**/struct WmCreateAccountRequest { 1:i32 source, 2:i32 accountType, 3:i64 partnerId, 4:i32 partnerType, 5:string partnerName, 6:i32 poiFlag,}namespace java thrift.domain/** 测试类**/struct WmCreateAccountRespone { 1:i32 code, 2:string message,}编译器需要大家去下载对应的版本 windows和linux下不同的编译器，下载地址http://archive.apache.org/dist/thrift/0.8.0/ 下载0.8.0版本即可,0.8.0版本是很老的版本了，但是相对稳定，后续会把thirft版本升级。 编译上面三个文件 thrift -gen java WmCreateAccountService.thrift, thrift -gen java WmCreateAccountRequest.thrift, thrift -gen java WmCreateAccountRespone.thrift 在当前目录下会生成3个java文件 这三个文件分别是请求体，返回体，和服务类，就这么简单 Ok作为开发者而言，所有的准备工作都结束了。下面就开始进入实际开发~]]></content>
      <categories>
        <category>样式测试</category>
      </categories>
      <tags>
        <tag>2019</tag>
      </tags>
  </entry>
</search>
